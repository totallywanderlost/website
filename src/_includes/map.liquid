<div id="map" class="full hide"></div>

<link rel="stylesheet" href="https://unpkg.com/leaflet@1.8.0/dist/leaflet.css" integrity="sha512-hoalWLoI8r4UszCkZ5kL8vayOGVae1oxXe/2A4AO6J9+580uKHDO3JdHb7NzwwzK5xr/Fs0W40kiNHxM9vyTtQ==" crossorigin="" />
<style>
  .emoji-28 {
    font-size: 28px;
  }

  .emoji-32 {
    font-size: 32px;
  }
</style>
<script src="https://unpkg.com/leaflet@1.8.0/dist/leaflet.js" integrity="sha512-BB3hKbKWOc9Ez/TAwyWxNXeoV9c1v6FIeYiBieIWkpLjauysF18NzgR1MBNBXf8/KABdlkX68nAhlwcDFLGPCQ==" crossorigin=""></script>
<script>
  window.addEventListener('DOMContentLoaded', () => {
    function capitalise(s) {
      return s[0].toUpperCase() + s.slice(1);
    }

// Set up the map and allow for controlling interactivity such as zoom, scroll etc
    const map = L.map('map', {
      zoomControl: {{ include.interactive }},
      scrollWheelZoom: {{ include.interactive }},
      doubleClickZoom: {{ include.interactive }},
      dragging: {{ include.interactive }},
      tap: {{ include.interactive }},
      touchZoom: {{ include.interactive }},
      scrollWheelZoom: {{ include.interactive }},
      layers: [
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        })
      ]
    });

    // Load all the map data for our journey
    const journey = {{ site.data.journey | jsonify }};

    // Extract the various states of location coordinates to plot
    const all = journey.steps.map(s => s.location);
    const visited = journey.steps.filter(s => s['state'] === 'visited').map(s => s.location);
    const planned = journey.steps.filter(s => s['state'] === 'planned').map(s => s.location);
    const current = journey.steps.filter(s => s['state'] === 'current').map(s => s.location);

    // Fit the map to show the current or all locations
    const bounds = '{{ include.locations }}' === 'latest' ? current : all;
    map.fitBounds(bounds, { maxZoom: 5 });

    // Build the icons we'll be plotting for each step
    const icon = {
      visited: L.divIcon({
        iconSize  : [28, 28],
        iconAnchor: [2, 28 + 4],
        className : 'emoji-28',
        html: 'ðŸ“Œ'
      }),
      current: L.divIcon({
        iconSize  : [28, 28],
        iconAnchor: [32/2, 28 + 4],
        className : 'emoji-28',
        html: 'ðŸ‘‹'
      }),
      planned: L.divIcon({
        iconSize  : [32, 32],
        iconAnchor: [32/2, 32 + 4],
        className : 'emoji-32',
        html: 'ðŸ¦˜'
      }),
    };

    // Add each journey step to the map
    for (const step of journey.steps) {
      // Add a marker and tooltip for each location
      const marker = L.marker(step.location, { title: step.name, icon: icon[step.state] }).addTo(map);
      marker.bindTooltip(`${capitalise(step.state)} Location: ${step.name}`);

      // Show a popup on the last i.e. latest location
      if (step['state'] === 'current') {
        marker.openTooltip();
      }
    }

    // Draw lines showing our joruney between each location
    L.polyline(visited.concat(current), {color: 'purple', opacity: 1, weight: 2, dashArray: '5,5'}).addTo(map);
    L.polyline(current.concat(planned), {color: 'purple', opacity: 0.4, weight: 2, dashArray: '7,7'}).addTo(map);

    // Show the map now it's all configured
    map.getContainer().classList.remove('hide');
  });
</script>
