<div id="map" class="full hide"></div>

<link rel="stylesheet" href="https://unpkg.com/leaflet@1.8.0/dist/leaflet.css" integrity="sha512-hoalWLoI8r4UszCkZ5kL8vayOGVae1oxXe/2A4AO6J9+580uKHDO3JdHb7NzwwzK5xr/Fs0W40kiNHxM9vyTtQ==" crossorigin="anonymous">
<link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.5.3/dist/MarkerCluster.css" integrity="sha512-mQ77VzAakzdpWdgfL/lM1ksNy89uFgibRQANsNneSTMD/bj0Y/8+94XMwYhnbzx8eki2hrbPpDm0vD0CiT2lcg==" crossorigin="anonymous">
<link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.5.3/dist/MarkerCluster.Default.css">
<script src="https://unpkg.com/leaflet@1.8.0/dist/leaflet.js" integrity="sha512-BB3hKbKWOc9Ez/TAwyWxNXeoV9c1v6FIeYiBieIWkpLjauysF18NzgR1MBNBXf8/KABdlkX68nAhlwcDFLGPCQ==" crossorigin="anonymous"></script>
<script src="https://unpkg.com/leaflet.markercluster@1.5.3/dist/leaflet.markercluster.js" integrity="sha512-OFs3W4DIZ5ZkrDhBFtsCP6JXtMEDGmhl0QPlmWYBJay40TT1n3gt2Xuw8Pf/iezgW9CdabjkNChRqozl/YADmg==" crossorigin="anonymous"></script>

<style>
.leaflet-popup-content-wrapper {
  border-radius: 0;
  background-color: #fefefe;
}

.leaflet-popup-content {
  margin: 13px 10px 10px 10px;
  text-align: center;
}

.leaflet-popup-content img {
  margin-bottom: 10px;
}
</style>

<script>
  window.addEventListener('DOMContentLoaded', () => {
    function capitalise(s) {
      return s[0].toUpperCase() + s.slice(1);
    }

    function pin(colour) {
      const fill = colour != undefined ? colour : 'red';
      const size = 24;
      const svg = `<svg style="fill: ${fill}" width="${size}" height="${size}" xmlns="http://www.w3.org/2000/svg"><path fill="none" d="M0 0h24v24H0z"/><path d="M19 9A7 7 0 1 0 5 9c0 1.387.41 2.677 1.105 3.765h-.008C8.457 16.46 12 22 12 22l5.903-9.235h-.007A6.98 6.98 0 0 0 19 9zm-7 3a3 3 0 1 1 0-6 3 3 0 0 1 0 6z"/></svg>`;
      const url = 'data:image/svg+xml;base64,' + btoa(svg);

      return L.icon({
        iconUrl: url,
        iconSize: [size, size],
        iconAnchor: [size / 2, (size / 2) + (size / 3)]
      });
    }

    // Set up the map and allow for controlling interactivity such as zoom, scroll etc
    const map = L.map('map', {
      zoomControl: {{ include.zoom | default: true }},
      scrollWheelZoom: {{ include.zoom | default: true }},
      doubleClickZoom: {{ include.zoom | default: true }},
      touchZoom: {{ include.zoom | default: true }},
      dragging: {{ include.drag | default: true }},
      tap: {{ include.tap | default: true }},
      layers: [
        L.tileLayer('https://{s}.tile.jawg.io/jawg-sunny/{z}/{x}/{y}{r}.png?access-token={accessToken}', {
          attribution: '<a href="http://jawg.io" title="Tiles Courtesy of Jawg Maps" target="_blank">&copy; <b>Jawg</b>Maps</a> &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
          minZoom: 0,
          maxZoom: 22,
          subdomains: 'abcd',
          accessToken: 'L72TIZSbpN96TpWalLwyaqI1hy1zmrVukmXtLocvpVUN8EWBNqHfI9rTHLAGNE07'
        })
      ]
    });

    // Load all the map data for our journey
    const journey = {{ site.data.journey | jsonify }};

    // Extract the various states of location coordinates to plot
    const all = journey.steps.map(s => s.location);
    const locationsWithState = (state) => journey.steps.filter(s => s['state'] === state).map(s => s.location);
    const locationsWithoutState = (state) => journey.steps.filter(s => s['state'] !== state).map(s => s.location);
    const stopped = locationsWithState('stopped');
    const visited = locationsWithState('visited');
    const planned = locationsWithState('planned');
    const current = locationsWithState('current');
    const last = (count) => visited.concat(current).slice(-count);

    // Fit the map to show the latest, all or last N locations
    const locations = '{{ include.locations }}';
    const bounds = locations === 'latest' ? current : isNaN(locations) ? all : last(locations);
    map.fitBounds(bounds, { maxZoom: 10 });

    // Build the icons we'll be plotting for each step
    const icon = {
      visited: pin('#D1192F'),
      current: pin('#1D4E89'),
      planned: pin('#E47011')
    };

    // Create a group for markers to potentially be clustered
    const markers = L.markerClusterGroup({ showCoverageOnHover: false, maxClusterRadius: 30 });

    // Plot each location we visited or plan to visit
    for (const step of journey.steps) {
      if (step['state'] === 'stopped') {
        continue;
      }

      // Add a marker and tooltip for each location
      const marker = L.marker(step.location, {
        title: step.name,
        icon: icon[step.state]
      });

      const height = 500;
      const width = 500;
      const hasImage = step.photos.length > 0;
      const url = hasImage ? `${step.photos[0].url}?tr=w-${width},h-${height},fo-center` : '';
      const image = hasImage ? `<a href="/journey#${step['id']}"><img src="${url}" height="auto" width="100%" style="min-width: 200px; object-fit: cover;"></a>` : '';
      const date = new Date(step.arrived*1000).toLocaleDateString('en-GB', { day: '2-digit', month: '2-digit', year: '2-digit' });

      marker.bindPopup(`${image}<div style="font-family: Chalkduster, fantasy; font-size: 16px"><b>${step.name}</b></div><div style="font-family: Chalkduster, fantasy; font-size: 14px; letter-spacing: 2px; margin-top: 10px">${date}</div>`, {
        closeButton: false,
        minWidth: 150,
        minHeight: 150
      });

      // Add the marker to the cluster group
      markers.addLayer(marker);
    }

    // Add the cluster group to the map
    map.addLayer(markers);

    // Draw lines showing our joruney between each location
    L.polyline(locationsWithoutState('planned'), { color: '#111', opacity: 1, weight: 2, dashArray: '5,5' }).addTo(map);

    // Show the map now it's all configured
    map.getContainer().classList.remove('hide');
  });
</script>
